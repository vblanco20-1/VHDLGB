- microjump test program. Should keep looping to 0, 
- and never overwrite the A register
-- 00 called when resetting
noop
noop
jmp :init
-- 01 called per frame
noop
noop
jmp :vsync
noop

-- constants
#byte lH = 0x11
#byte lE = 0x0E
#byte lL = 0x15 
#byte lO = 0x18 
#byte lW = 0x20
#byte lR = 0x1B 
#byte lD = 0x0D
#byte SnakeHead = 0xE3
--draw 255 times before going to next line
#byte drawcount = 0xFF

--variables
#byte Mp_MSB = 0x98
#byte Mp_LSB = 0x00

$byte framecounter = 0x00
$byte wordpos = 0x05
$byte snake_x = 0x01
$byte snake_y_lsb = 0x03
$byte snake_y_msb = 0x98

noop
:vsync
noop
- handle framecounter
ld a $framecounter
inc A
and a #0x0F
ld H #0x99
ld L #0x00
ld (hl) a
ld $framecounter a

----- handle snake cursor and clear
-- load snake position memory adress
ld a $snake_y_lsb
ld l a
ld a $snake_y_msb
ld h a

- add snakex to adress
ld a $snake_x
ld c a
add a L
ld l a
ld (hl) #0xE3

jmp :endframe

-- inc l to move to the right
-inc a
-ld l a

--write head
-ld (hl) $SnakeHead

-and a #0x14
-ld $snake_x a


-- load drawcount into c
-ld c $drawcount 

--hello world implementation

:drawloop
--load map adress into HL
ld H $Mp_MSB
ld L $Mp_LSB

-- fully clear everything

ld a #0x1
ld e #0x7D
:clearloop_outer

ld L #0xFF
--:clearloop_inner
-d (hl) e
-dec L
-jmp nz :clearloop_inner
-inc H
-dec a
-jmp nz :clearloop_outer


--reset HL
ld H $Mp_MSB
ld L $Mp_LSB

-- load wordpos into dec
ld a $wordpos
ld d a
-- increment l by d
ld a l
add a d
ld l a

-- if a is zero, avoid the clear
-jmp z :postloop
--a has L, decrement writing clear 
-:preloop
-ld (hl) #0xFF
-dec L
-jmp nz :preloop

-:postloop

--reset l to what it was
ld l a
--print hello world into the tilemap one letter at a time
ld (hl) #0xFF
inc L
ld (hl) $lH
inc L
ld (hl) $lE 
inc L
ld (hl) $lL 
inc L
ld (hl) $lL
inc L
ld (hl) $lO 
inc L
ld (hl) #0x25
inc L
ld (hl) $lW 
inc L
ld (hl) $lO 
inc L
ld (hl) $lR 
inc L
ld (hl) $lL 
inc L
ld (hl) $lD 
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L
ld (hl) #0xFF
inc L

-- decrement x location of world
-dec d
-jmp nz :branchend
-ld d #0x8

-:branchend
:endframe
inc l

$byte halt = 0x76

jmp :vsync

:init
noop
noop
jmp :vsync
noop
$byte halt = 0x76